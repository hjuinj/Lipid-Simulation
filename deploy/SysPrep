#!/usr/bin/env python
import numpy as np
import MDAnalysis
import matplotlib.pyplot as plt
import warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    import pandas as pd
import subprocess, os, StringIO, re, datetime, time, sys
import optparse

# dir_pep = '/home/shuzhe/Sandbox/build/insert/peptide_solvated_boxsize.gro'
# dir_dppc = '/home/shuzhe/Sandbox/build/insert/dppc128_whole.gro'
# dir_combined  = '/home/shuzhe/Sandbox/build/insert/dppc+peptide_new.gro'

def a2n(length):    return length / 10.0

def parse():
    parser = optparse.OptionParser()
    parser.add_option("-l", dest="lipid_file")
    parser.add_option("-p", dest="protein_file")
    parser.add_option('-o', dest="output_file", default = "./output.gro")
    parser.add_option('-s', '--solvate', action = "store_true", dest="solvate")
    parser.add_option('-c', '--combine', action = "store_true", dest="combine")
    (options, args ) = parser.parse_args()
    return options
"""
Commands:

- resize box around the peptide without solvent:
"gmx editconf -f input.gro -o output.gro -c yes -d 0"

- increase lipid box solvent layer thickness to accomodate the peptide
"gmx editconf -f input.gro -o output.gro -box  ori_x ori_y new_z  -center ori_x/2 ori_y/2  ori_z/2"

- insert the peptide above the lipid-solvent system (currently only inserts one copy at the center of the plane)
"gmx insert-molecules -f input.gro -o output.gro -ci to_insert.gro -ip positions.dat "

- solvation of system
"gmx solvate -cp tmp.gro -cs spc216.gro -o tmptmp.gro"

- energy min
"gmx grompp -f em.mdp -c input.gro -p topol.top -o em.tpr"

- extract frames
"gmx trjconv -s pull.tpr -f traj_comp.xtc -o conf.gro -sep"
"""

############## Combine Lipid and peptide ####################################
# Peptide above lipid
# DPPC should have a pbc box surronding it, this is needed

def make_consec_res(u, counter = 1):
    """
    Resid will start from 1 and run consecutively upto the total number of residue

    Examples:
    2 2 4 4
    """
    copy = u.residues.resids
    # print copy
    previous = copy[0]
    for c in range(len(copy)):
        current = copy[c]
        if current != previous:
            counter += 1
            previous = current
        copy[c] = counter
    u.residues.set_resids(copy)
    return u

def reorder(atoms1, atoms2):
    """
    Will lose the box
    """
    u_comb = MDAnalysis.Merge(atoms1, atoms2)
    # print len(atoms1)
    u_comb = make_consec_res(u_comb)
    return u_comb

def concat(u1, u2):
    u_comb = MDAnalysis.Merge(u1, u2)
    p1 = u_comb.select_atoms("bynum 1:%s" %str(len(u1)))
    p2 = u_comb.select_atoms("bynum %s:%s" %(str(len(u1) + 1), str(len(u1) + len(u2))))
    p1.segids = "A"
    p2.segids = "B"
    p2.residues.set_resid(p2.residues.resids + p1.residues.resids[-1])
    return u_comb

def merge(lipid, peptide):
    """
    Reuqires pbc box to be defined for both the input lipid and peptide configuration
    """
    xyz = peptide.atoms.positions
    xyz[ : ,2] += abs(min(xyz[ : ,2]))
    xyz[ : ,2] += abs(max(lipid.atoms.positions[ :,2])) + 2
    p_dim = peptide.dimensions
    peptide.atoms.positions = xyz

    peptide = reorder(peptide.select_atoms("resname SOL"), peptide.select_atoms("not resname SOL"))
    # print peptide.residues.resnames
    # print peptide.atoms
    u_comb = concat(lipid.atoms, peptide.atoms)

    u_comb.dimensions = lipid.dimensions
    u_comb.dimensions[2] += p_dim[2]
    return u_comb


# dppc = MDAnalysis.Universe(dir_dppc)
# peptide = MDAnalysis.Universe(dir_pep)
## peptide = reorder(peptide.select_atoms("resname SOL"), peptide.select_atoms("not resname SOL"))
# u = merge(dppc, peptide)
# u.atoms.write("./tmp.gro")


options = parse()
lipid, peptide, combined = options.lipid_file, options.protein_file, options.output_file
lipid = MDAnalysis.Universe(lipid)
peptide = MDAnalysis.Universe(peptide)


if options.solvate:
    x, y = lipid.dimensions[0], lipid.dimensions[1]
    z = peptide.atoms.positions[:, 2]
    z = max(20, abs(max(z) - min(z))) * 1.1   # compensate for short range non-bonding interactions cutoff

    # os.system("cp -r   ../Input/gromos53a6_lipids.ff/ .")
    os.system( "gmx editconf -f %s -o tmp.gro -box  %f %f %f  -center %f %f %f" %(options.protein_file, a2n(x), a2n(y), a2n(z), a2n(x/2.0), a2n(y/2.0), a2n(z/2.0)))
    os.system("gmx solvate -cp tmp.gro  -cs spc216.gro -o %s -p topol.top" %(options.output_file))
    os.system("rm tmp.gro")
    # os.system("gmx grompp -f 0-emin.mdp -c out.gro -p topol.top -o out.tpr")
    # os.system("gmx mdrun -v -deffnm out")
    # os.system("rm -r   ./gromos53a6_lipids.ff/")

elif options.combine:
    # peptide = MDAnalysis.Universe("out.gro")
    u = merge(lipid, peptide)
    u.atoms.write(combined)
    print "Add lipid.itp entries in topology file"
##############################################################################
"""
For topological file
"""
"""
For topological file
"""
u = MDAnalysis.Universe(combined)
res = u.atoms.resnames[0]
counter = 0
res_size = 0.0
res_id = u.atoms.resids[0]
for i in u.atoms:
    if i.resname == res:
        counter += 1
        if i.resid == res_id :
            res_size += 1
    else:
        # print counter, res, int(round(counter/res_size))
        print res, int(round(counter/res_size))
        counter = 1
        res = i.resname
        res_id = i.resid
        res_size = 1.0
# print counter, res, int(round(counter/res_size))
print res, int(round(counter/res_size))
# def unique_ordered(seq):
#     seen = set()
#     seen_add = seen.add
#     return [x for x in seq if not (x in seen or seen_add(x))]
# u = MDAnalysis.Universe(combined)
# # types = np.unique(u.atoms.resnames)
# types = unique_ordered(u.atoms.resnames)
# # len(u.atoms)
# os.system("cp topol.top init_topol.top")
# f = open("topol.top", "a")
# print "MODIFIY THE TOPOLOGY FILE!!!"
# for i in types:
#     tmp = u.select_atoms("resname " + str(i))
#     print i + "\t" + str(tmp.n_residues)
#     f.write(i + "\t" + str(tmp.n_residues) + "\n")
# print f.readlines()[-1]
# f.close()
#
# os.system("mv topol.top ../Input/topol.top")
# os.system("mv init_topol.top topol.top")
