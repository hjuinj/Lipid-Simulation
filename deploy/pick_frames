#!/usr/bin/env python

import numpy as np
import MDAnalysis
import matplotlib.pyplot as plt
import warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    import pandas as pd
import subprocess, os, StringIO, re, datetime, time, sys
import optparse



def parse():
    parser = optparse.OptionParser()
    parser.add_option('-d','--dir', dest="directory", default = "./")
    parser.add_option('-z', dest="direction", default = "-")
    parser.add_option('-c', dest="cross_boundary", default = None)
    parser.add_option('-r', dest="residue")
    (options, args ) = parser.parse_args()
    return options

options = parse()
def extract_frames(command, path, config = "/pull.gro", trj = "/pull.xtc", increment = 2):
    u = MDAnalysis.Universe(path + config, path + trj)
    max_z = max(u.atoms.positions[:,2])
    min_z = min(u.atoms.positions[:,2])
    residue = u.select_atoms(command)

    f = open(path + "/frames", "w")
    start = round(residue.center_of_mass()[2])
    for ts in u.trajectory:
        # print len(u.atoms.positions[:,2][u.atoms.positions[:,2] < (residue.center_of_mass()[2] - 20 )])
        if options.cross_boundary:
            xyz = u.atoms.positions
            if options.direction == "-" :
                xyz[:,2][xyz[:, 2] > (max_z + min_z) /2.0] -= max_z
            elif options.direction == "+" :
                xyz[:,2][xyz[:, 2] < (max_z + min_z) /2.0] += max_z
            u.atoms.positions = xyz
        # print residue.center_of_mass()[2]
        # print u.atoms.positions[:,2]
        print residue.center_of_mass()[2], start
        if options.direction == "-" and (start - round(residue.center_of_mass()[2])) >= increment :
            start = round(residue.center_of_mass()[2])
            # if options.direction == "-" :
            #     start -= increment
            # else:
            #     start += increment
            f.write(str(ts.frame) + "\n")
        elif options.direction == "+" and (-start + round(residue.center_of_mass()[2])) >= increment :
            start = round(residue.center_of_mass()[2])
            f.write(str(ts.frame) + "\n")
        # elif (options.direction == "-" and start < residue.center_of_mass()[2]) or (options.direction == "+" and start > residue.center_of_mass()[2]):
        # elif abs(start - int(residue.center_of_mass()[2])) > increment:
            # print "here"
            # start = int(residue.center_of_mass()[2])
    f.close()


extract_frames(options.residue, options.directory)
#############################################################3333
